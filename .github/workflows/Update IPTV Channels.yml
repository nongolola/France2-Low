name: Update IPTV Channels
on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update-m3u8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: pip install requests PyGithub
      - name: Update m3u8 Files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c '
          import requests
          from github import Github

          # Connect to GitHub
          g = Github("${{ env.GITHUB_TOKEN }}")
          repo = g.get_repo("nongolola/NTJ_LQ_TV")

          # Read NTJ_LQ_Channels.txt
          try:
              file_content = repo.get_contents("NTJ_LQ_Channels.txt")
              channel_data = file_content.decoded_content.decode("utf-8").strip().splitlines()
              channels = {}
              for line in channel_data:
                  if ":" in line:
                      file, url = line.split(":", 1)
                      channels[file.strip()] = url.strip()
                  else:
                      print(f"Skipping invalid line: {line}")
          except Exception as e:
              print(f"Error reading NTJ_LQ_Channels.txt: {e}")
              raise  # Stop if we canâ€™t read the file

          # Resolutions to remove
          resolutions_to_remove = ["1920x1080", "1280x720", "960x540"]

          # Update m3u8 files
          for file, url in channels.items():
              try:
                  master = requests.get(url).text
                  lines = master.splitlines()
                  trimmed_lines = []
                  skip_next = False
                  for line in lines:
                      if skip_next:
                          skip_next = False
                          continue
                      if any(res in line for res in resolutions_to_remove) and "EXT-X-STREAM-INF" in line:
                          skip_next = True
                      else:
                          trimmed_lines.append(line)
                  trimmed = "\n".join(trimmed_lines)
                  file_content = repo.get_contents(file)
                  repo.update_file(file, f"Update {file}", trimmed, file_content.sha)
              except Exception as e:
                  print(f"Error updating {file}: {e}")
          '
